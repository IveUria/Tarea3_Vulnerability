package testIU;

import apiClient.FactoryRequest;
import io.qameta.allure.Attachment;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Step;
import io.qameta.allure.junit4.DisplayName;
import io.restassured.response.Response;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class VulnerabilityTest {
    String globalIdScan = "";
    @Before
    public void before(){

    }
    @Test
    @DisplayName("VERIFICACION VULNERABILIDAD TEST USANDO OWASP")// SECCIONES QUE SE COLOCAN CON ALLURE
    @Description("DESCRIPCION: CASO DE PRUEBA PARA VERIFICAR EL ATAQUE A LA PAGINA TODO.LY") // SECCIONES QUE SE COLOCAN CON ALLURE
    @Owner("dIPLOMADO")
    public void verifyVulnerabilityScanTest() throws InterruptedException {
        ///acciones para la prueba de vulnerabilidad
        String idScan = startScanningOWASPZAP();
        monitoringStateAttack(globalIdScan);
    }
    @After
    public void after(){
        generateReportOWASP();
    }
    //metodo que permite adjuntar datos, datos de ingreso el nombre y el html
    //adjuntara los datos del html (text/html) al reporte
    @Attachment(value = "{0}",type = "text/html")
    public static String attachHTMLFile(String name, String html) {
        return html;
    }

    // metodo para scanear
    @Step("Iniciar el escaneo de vulnerabilidad con OWASZAP")
    public String startScanningOWASPZAP(){
        //iniciar el scan y obtener el ID
        String starScanUrl = "http://127.0.0.1:8888/JSON/ascan/action/scan/?url=\"https://todoist.com/\"&recurse=&inScopeOnly=&scanPolicyName=&method=&postData=&contextId=";
        Response response = FactoryRequest.make("get").send(starScanUrl);
        response.prettyPrint();// se muestara en consola lo que devuelve el response

        //{"scan":"1"}
        String scanId = response.then().extract().path("scan");
        System.out.println("id del scan " +scanId);
        return scanId;
    }
    @Step("Monitoreo del escaneo de vulnerabilidad con OWASZAP al  100%")
    public void monitoringStateAttack(String scanId) throws InterruptedException {
        //consultar si el scan ya llego al 100% con el ID
        String getStateUrl="http://127.0.0.1:8888/JSON/ascan/view/status/?scanId="+scanId;
        String isComplete="";
        while (!isComplete.equals("100") ){
            // se espera para preguntar el estado del scan
            Thread.sleep(30000);
            Response responseStatus=FactoryRequest.make("get").send(getStateUrl);
            isComplete=responseStatus.then().extract().path("status");
            System.out.println("% de scaneo Owasp: "+isComplete);
        }
    }

    public void generateReportOWASP(){
        //recuperar el sumary tipos de ataque en html
        String getReportHTML = " http://127.0.0.1:8888/OTHER/core/other/htmlreport/";
        Response responseReport =  FactoryRequest.make("get").send(getReportHTML);
        String htmlReport = responseReport.body().asString();
       // System.out.println("reporte HTML "+ htmlReport);
        //llamamos al metodo para enviar el nombre del reporte
        //y el nombre del htmlallure serve build\allure-results
        attachHTMLFile("REPORTE DE VULNERABILIDAD DETALLADO DE OWASZAP",htmlReport);

        String getSummaryReportHMTL="http://127.0.0.1:8888/HTML/ascan/view/scanProgress/?scanId="+globalIdScan;
        responseReport=FactoryRequest.make("get").send(getSummaryReportHMTL);
        String htmlSumaryReport=responseReport.body().asString();
        attachHTMLFile("SUMARIO DE VULNERABILIDAD DETALLADO DE OWASZAP",htmlSumaryReport);

    }


}
